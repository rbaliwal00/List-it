{"version":3,"sources":["postings/components/Form.js","shared/util/validators.js","postings/hooks/form-hook.js","shared/UIElements/FormInput.js"],"names":["JobForm","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useState","checked","setChecked","checked1","setChecked1","checked2","setChecked2","checked3","setChecked3","checked4","setChecked4","employment","setEmployment","useForm","title","value","isValid","city","pincode","description","compensation","formemail","phone","contactname","extension","street","crossstreet","cityy","address","formState","inputHandler","history","useHistory","useParams","location","categoryType","form","postSubmitHandler","event","a","preventDefault","formData","FormData","append","inputs","directcontact","internship","nonprofit","relocation","telecommuting","userId","process","Authorization","token","push","Fragment","onClear","style","textAlign","className","onSubmit","marginRight","asOverlay","id","element","type","label","size","color","bordercolor","validators","VALIDATOR_REQUIRE","onInput","errorText","marginBottom","rows","VALIDATOR_MINLENGTH","margin","placeholder","fluid","selection","options","key","text","onChange","marginLeft","name","target","marginTop","onClick","disabled","val","VALIDATOR_EMAIL","validate","undefined","length","validator","trim","test","formReducer","state","action","formIsValid","inputId","initialInputs","initialFormValidity","useReducer","dispatch","useCallback","inputData","formValidity","inputReducer","isTouched","FormInput","props","initialValue","initialValid","inputState","useEffect","res","changeHandler","console","log","touchHandler","borderColor","onBlur","cols"],"mappings":"8QA+YeA,UA/XC,WACZ,IAAMC,EAAOC,qBAAWC,KADN,EAEoCC,cAA9CC,EAFU,EAEVA,UAAWC,EAFD,EAECA,MAAOC,EAFR,EAEQA,YAAaC,EAFrB,EAEqBA,WAFrB,EAGYC,oBAAS,GAHrB,mBAGXC,EAHW,KAGFC,EAHE,OAIcF,oBAAS,GAJvB,mBAIXG,EAJW,KAIDC,EAJC,OAKcJ,oBAAS,GALvB,mBAKXK,EALW,KAKDC,EALC,OAMcN,oBAAS,GANvB,mBAMXO,EANW,KAMDC,EANC,OAOcR,oBAAS,GAPvB,mBAOXS,EAPW,KAODC,EAPC,OAQkBV,mBAAS,KAR3B,mBAQXW,EARW,KAQCC,EARD,OAsCgBC,YAC9B,CACIC,MAAO,CACHC,MAAO,GACPC,SAAS,GAEbC,KAAM,CACFF,MAAO,GACPC,SAAS,GAEbE,QAAS,CACLH,MAAO,GACPC,SAAS,GAEbG,YAAa,CACTJ,MAAO,GACPC,SAAS,GAEbI,aAAc,CACVL,MAAO,GACPC,SAAS,GAEbK,UAAW,CACPN,MAAO,GACPC,SAAS,GAEbM,MAAO,CACHP,MAAO,GACPC,SAAS,GAEbO,YAAa,CACTR,MAAO,GACPC,SAAS,GAEbQ,UAAW,CACPT,MAAO,GACPC,SAAS,GAEbS,OAAQ,CACJV,MAAO,GACPC,SAAS,GAEbU,YAAa,CACTX,MAAO,GACPC,SAAS,GAEbW,MAAO,CACHZ,MAAO,GACPC,SAAS,GAEbY,QAAS,CACLb,MAAO,GACPC,SAAS,KAEd,GA5FW,mBAsCXa,EAtCW,KAsCAC,EAtCA,KA8FdC,EAAUC,cA9FI,EA+FuBC,cAAjCC,EA/FU,EA+FVA,SAAUC,EA/FA,EA+FAA,aAAcC,GA/Fd,EA+FcA,KAE1BC,GAAiB,uCAAG,WAAMC,GAAN,eAAAC,EAAA,6DACtBD,EAAME,iBADgB,UAGZC,EAAW,IAAIC,UACZC,OAAO,QAASd,EAAUe,OAAO9B,MAAMC,OAChD0B,EAASE,OAAO,OAAQd,EAAUe,OAAO3B,KAAKF,OAC9C0B,EAASE,OAAO,UAAWd,EAAUe,OAAO1B,QAAQH,OACpD0B,EAASE,OAAO,cAAed,EAAUe,OAAOzB,YAAYJ,OAC5D0B,EAASE,OAAO,eAAgBd,EAAUe,OAAOxB,aAAaL,OAC9D0B,EAASE,OAAO,YAAad,EAAUe,OAAOvB,UAAUN,OACxD0B,EAASE,OAAO,QAASd,EAAUe,OAAOtB,MAAMP,OAChD0B,EAASE,OAAO,YAAad,EAAUe,OAAOpB,UAAUT,OACxD0B,EAASE,OAAO,cAAed,EAAUe,OAAOrB,YAAYR,OAC5D0B,EAASE,OAAO,SAAUd,EAAUe,OAAOnB,OAAOV,OAClD0B,EAASE,OAAO,cAAed,EAAUe,OAAOlB,YAAYX,OAC5D0B,EAASE,OAAO,QAASd,EAAUe,OAAOjB,MAAMZ,OAChD0B,EAASE,OAAO,UAAhB,UAA8Bd,EAAUe,OAAOnB,OAAOV,OAAtD,OAA8Dc,EAAUe,OAAO3B,KAAKF,OAApF,OAA4Fc,EAAUe,OAAO1B,QAAQH,QACrH0B,EAASE,OAAO,gBAAiB1C,EAAQ4C,eACzCJ,EAASE,OAAO,aAAcxC,EAAS2C,YACvCL,EAASE,OAAO,YAAatC,EAAS0C,WACtCN,EAASE,OAAO,aAAcpC,EAASyC,YACvCP,EAASE,OAAO,gBAAiBlC,EAASwC,eAC1CR,EAASE,OAAO,aAAchC,GAC9B8B,EAASE,OAAO,UAAWnD,EAAK0D,QAChCT,EAASE,OAAO,WAAhB,UAA+BT,IAC/BO,EAASE,OAAO,WAAhB,UAA+BR,IAC/BM,EAASE,OAAO,WAAhB,UAA+BP,KA1Bb,UA2BZtC,EAAYqD,+CACd,OACAV,EACA,CAACW,cAAe,UAAY5D,EAAK6D,QA9BnB,QAgClBtB,EAAQuB,KAAR,WAAiBpB,EAAjB,YAA6BC,EAA7B,YAA6CC,GAA7C,eAhCkB,4GAAH,sDAyDvB,OACI,kBAAC,IAAMmB,SAAP,KACI,kBAAC,IAAD,CAAY1D,MAAOA,EAAO2D,QAASzD,IACnC,kBAAC,IAAD,CAAY0D,MAAO,CAACC,UAAW,SAA/B,WACaxB,EADb,MAC0BC,EAD1B,MAC2CC,IAE3C,yBAAKuB,UAAU,YACX,8BACI,0BAAMC,SAAUvB,GAAmBoB,MAAO,CAACI,YAAa,SACnDjE,GAAa,kBAAC,IAAD,CAAgBkE,WAAS,IACvC,yBAAKH,UAAU,gBACX,kBAAC,IAAD,CACII,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,gBACNC,KAAK,KACLC,MAAM,QACNC,YAAY,QACZC,WAAY,CAACC,eACbC,QAAS1C,EACT2C,UAAU,+BAEd,kBAAC,IAAD,CACIV,GAAG,OACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,wBACNC,KAAK,KACLG,WAAY,CAACC,eACbC,QAAS1C,EACT2C,UAAU,+CAEd,kBAAC,IAAD,CACIV,GAAG,UACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,WACNC,KAAK,KACLC,MAAM,QACNC,YAAY,QACZC,WAAY,CAACC,eACbC,QAAS1C,EACT2C,UAAU,kCAElB,yBAAKhB,MAAO,CAACiB,aAAc,UACvB,kBAAC,IAAD,CACIX,GAAG,cACHY,KAAK,KACLV,KAAK,WACLC,MAAM,cACNC,KAAK,MACLC,MAAM,QACNC,YAAY,QACZC,WAAY,CAACC,cAAqBK,YAAoB,IACtDJ,QAAS1C,EACT2C,UAAU,sCAElB,6BACI,kCACI,4BAAQhB,MAAO,CAAEC,UAAW,SAA5B,mBACA,yBAAKC,UAAU,OACf,yBAAKA,UAAU,WAAWF,MAAO,CAAEoB,OAAQ,kBACvC,kBAAC,IAAD,CACIC,YAAY,IACZC,OAAK,EACLC,WAAS,EACTC,QAnNb,CACnB,CACIC,IAAK,IACLC,KAAM,IACNpE,MAAO,KAEX,CACImE,IAAK,YACLC,KAAM,YACNpE,MAAO,aAEX,CACImE,IAAK,YACLC,KAAM,YACNpE,MAAO,aAEX,CACImE,IAAK,WACLC,KAAM,WACNpE,MAAO,YAEX,CACImE,IAAK,KACLC,KAAM,oBACNpE,MAAO,OA4LqBqE,SAAU,SAAC9C,EAAD,GAAuB,IAAbvB,EAAY,EAAZA,MAChBH,EAAcG,OAKtB,yBAAK4C,UAAU,WAAWF,MAAO,CAAEC,UAAW,OAAQ2B,WAAY,SAClE,2BAAOpB,KAAK,WACRF,GAAG,gBACHuB,KAAK,gBACLF,SAlGb,SAAC9C,GAChBpC,EAAW,eAAGoC,EAAMiD,OAAOxB,GAAKzB,EAAMiD,OAAOtF,aAkGrB,sEAAkD,6BAClD,2BAAOgE,KAAK,WACJF,GAAG,aACHuB,KAAK,aACTF,SAnGZ,SAAC9C,GACrBlC,EAAY,eAAGkC,EAAMiD,OAAOxB,GAAKzB,EAAMiD,OAAOtF,aAmGlB,sEAAkD,6BAClD,2BAAOgE,KAAK,WACJF,GAAG,YACHuB,KAAK,aACTF,SApGZ,SAAC9C,GACrBhC,EAAY,eAAGgC,EAAMiD,OAAOxB,GAAKzB,EAAMiD,OAAOtF,aAoGd,0DAAsC,6BAC1C,2BAAOgE,KAAK,WACJF,GAAG,aACHuB,KAAK,aACTvE,MAAM,IACNqE,SAtGZ,SAAC9C,GACrB9B,EAAY,eAAG8B,EAAMiD,OAAOxB,GAAKzB,EAAMiD,OAAOtF,aAsGd,iEAA6C,6BACjD,2BAAOgE,KAAK,WACJF,GAAG,gBACHuB,KAAK,gBACTvE,MAAM,IACNqE,SAxGZ,SAAC9C,GACrB5B,EAAY,eAAG4B,EAAMiD,OAAOxB,GAAKzB,EAAMiD,OAAOtF,aAwGd,mDAA+B,iCAK/C,yBAAK0D,UAAU,UACX,kBAAC,IAAD,CACII,GAAG,eACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,eACNY,YAAY,iEACZX,KAAK,MACLE,YAAY,QACZC,WAAY,CAACC,eACbC,QAAS1C,EACT2C,UAAU,uCAElB,yBAAKd,UAAU,MAAMF,MAAO,CAAEoB,OAAQ,aAClC,kCACI,4BAAQpB,MAAO,CAAEC,UAAW,SAA5B,gBACA,yBAAKC,UAAU,MAAMF,MAAO,CAACI,YAAa,SACtC,yBAAKF,UAAU,YACf,kBAAC,IAAD,CACII,GAAG,YACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,QACNY,YAAY,qBACZX,KAAK,KACLG,WAAY,CAACC,eACbC,QAAS1C,EACL2C,UAAU,wCAEtB,yBAAKd,UAAU,YACX,kCACI,4BAAQF,MAAO,CAAEC,UAAW,SAA5B,eADJ,IAGQ,yBAAKC,UAAU,OACnB,yBAAKA,UAAU,YACX,kBAAC,IAAD,CACII,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,eACNC,KAAK,KACLG,WAAY,CAACC,eACbC,QAAS1C,EACT2C,UAAU,sCACd,kBAAC,IAAD,CACIV,GAAG,cACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,eACNC,KAAK,KACLG,WAAY,CAACC,eACbC,QAAS1C,EACT2C,UAAU,uCAElB,yBAAKd,UAAU,8BACX,kBAAC,IAAD,CACII,GAAG,YACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,YACNC,KAAK,KACLG,WAAY,CAACC,eACbC,QAAS1C,EACT2C,UAAU,0CAQlC,8BAAUhB,MAAO,CAAE+B,UAAW,SAC1B,4BAAQ/B,MAAO,CAAEC,UAAW,SAA5B,iBACA,yBAAKC,UAAU,OACf,yBAAKA,UAAU,YACX,kBAAC,IAAD,CACII,GAAG,SACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,SACNC,KAAK,KACLG,WAAY,CAACC,eACbC,QAAS1C,EACT2C,UAAU,iCAEd,yBAAKd,UAAU,YACf,kBAAC,IAAD,CACII,GAAG,cACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,eACNC,KAAK,KACLG,WAAY,CAACC,eACbC,QAAS1C,EACT2C,UAAU,uCAEd,yBAAKd,UAAU,YACf,kBAAC,IAAD,CACII,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,OACNC,KAAK,KACLG,WAAY,CAACC,eACbC,QAAS1C,EACT2C,UAAU,iCAItB,yBAAKd,UAAU,UACX,4BACIM,KAAK,SACLwB,QAASpD,GACTqD,UAAW7D,EAAUb,SAHzB,mB,oLC1XfuD,EAAoB,iBAAO,CAAEN,KARX,YAUlBW,EAAsB,SAAAe,GAAG,MAAK,CACzC1B,KAV+B,YAW/B0B,IAAKA,IAQMC,EAAkB,iBAAO,CAAE3B,KAfX,UAiBhB4B,EAAW,SAAC9E,EAAOuD,GAC5B,IAAItD,GAAU,EACd,GAAmB,OAAfsD,QAAsCwB,IAAfxB,GAAkD,IAAtBA,EAAWyB,OAC9D,OAAO,EAHgC,oBAKrBzB,GALqB,IAK7C,2BAAoC,CAAC,IAA1B0B,EAAyB,QA3BP,YA4BvBA,EAAU/B,OACZjD,EAAUA,GAAWD,EAAMkF,OAAOF,OAAS,GA5BhB,cA8BzBC,EAAU/B,OACZjD,EAAUA,GAAWD,EAAMkF,OAAOF,QAAUC,EAAUL,KA9B3B,cAgCzBK,EAAU/B,OACZjD,EAAUA,GAAWD,EAAMkF,OAAOF,QAAUC,EAAUL,KAhCjC,QAkCnBK,EAAU/B,OACZjD,EAAUA,IAAYD,GAASiF,EAAUL,KAlCpB,QAoCnBK,EAAU/B,OACZjD,EAAUA,IAAYD,GAASiF,EAAUL,KApClB,UAsCrBK,EAAU/B,OACZjD,EAAUA,GAAW,iBAAiBkF,KAAKnF,KAtBF,8BAyB7C,OAAOC,I,oGC7CHmF,EAAc,SAACC,EAAOC,GACxB,OAAQA,EAAOpC,MACX,IAAK,eACD,IAAIqC,GAAc,EAClB,IAAK,IAAMC,KAAWH,EAAMxD,OAEpB0D,EADAC,IAAYF,EAAOE,QACLD,GAAeD,EAAOrF,QAEtBsF,GAAeF,EAAMxD,OAAO2D,GAASvF,QAG3D,OAAO,2BACAoF,GADP,IAEIxD,OAAO,2BACAwD,EAAMxD,QADP,kBAEDyD,EAAOE,QAAU,CAAExF,MAAOsF,EAAOtF,MAAOC,QAASqF,EAAOrF,WAE7DA,QAASsF,IAEjB,IAAK,WACD,MAAO,CACH1D,OAAQyD,EAAOzD,OACf5B,QAASqF,EAAOC,aAExB,QACI,OAAOF,IAINvF,EAAU,SAAC2F,EAAeC,GAAyB,IAAD,EAC7BC,qBAAWP,EAAa,CAClDvD,OAAQ4D,EACRxF,QAASyF,IAH8C,mBACpD5E,EADoD,KACzC8E,EADyC,KAuB3D,MAAO,CAAC9E,EAjBa+E,uBAAY,SAAC7C,EAAIhD,EAAOC,GACzC2F,EAAS,CACL1C,KAAM,eACNlD,MAAOA,EACPC,QAASA,EACTuF,QAASxC,MAEd,IAEiB6C,uBAAY,SAACC,EAAWC,GACxCH,EAAS,CACL1C,KAAM,WACNrB,OAAQiE,EACRP,YAAaQ,MAElB,O,mFC/CDC,G,MAAe,SAACX,EAAOC,GACzB,OAAQA,EAAOpC,MACX,IAAK,SACD,OAAO,2BACAmC,GADP,IAEIrF,MAAOsF,EAAOV,IACd3E,QAAS6E,YAASQ,EAAOV,IAAKU,EAAO/B,cAE7C,IAAK,UACD,OAAO,2BACA8B,GADP,IAEIrF,MAAOsF,EAAOV,MAEtB,IAAK,QACD,OAAO,2BACAS,GADP,IAEIY,WAAW,IAEnB,QACI,OAAOZ,KA+EJa,IA3EG,SAAAC,GAAU,IAAD,EACQR,qBAAWK,EACtC,CACIhG,MAAOmG,EAAMC,cAAgB,GAC7BnG,QAASkG,EAAME,eAAgB,EAC/BJ,WAAW,IALI,mBAChBK,EADgB,KACJV,EADI,KAQf5C,EAAgBmD,EAAhBnD,GAAIS,EAAY0C,EAAZ1C,QACJzD,EAAmBsG,EAAnBtG,MAAOC,EAAYqG,EAAZrG,QAEfsG,qBAAU,WACN9C,EAAQT,EAAIhD,EAAOC,KACpB,CAAC+C,EAAIhD,EAAOC,EAASwD,IAExB,IAqCI+C,EArCEC,EAAgB,SAAAlF,GACC,aAAf4E,EAAMjD,QACuB,IAAzB3B,EAAMiD,OAAOtF,QACbwH,QAAQC,IAAR,eAAepF,EAAMiD,OAAOxB,GAAKzB,EAAMiD,OAAOtF,UAG9CwH,QAAQC,IAAR,eAAepF,EAAMiD,OAAOxB,GAAKzB,EAAMiD,OAAOxE,QAElD4F,EAAS,CAAE1C,KAAM,UAAW0B,IAAKrD,EAAMiD,OAAOtF,WAElD0G,EAAS,CAAE1C,KAAM,SAAU0B,IAAKrD,EAAMiD,OAAOxE,MAAOuD,WAAY4C,EAAM5C,cAGpEqD,EAAe,WACjBhB,EAAS,CACL1C,KAAM,WAIRD,EAA4B,UAAlBkD,EAAMlD,QAClB,2BACID,GAAImD,EAAMnD,GACVE,KAAMiD,EAAMjD,KACZa,YAAaoC,EAAMpC,YACnBX,KAAM+C,EAAM/C,KACZV,MAAO,CAAEmE,YAAaV,EAAM7C,aAC5Be,SAAUoC,EACVK,OAAQF,EACR5G,MAAOsG,EAAWtG,QACtB,8BACIgD,GAAImD,EAAMnD,GACVY,KAAMuC,EAAMvC,MAAQ,EACpBmD,KAAMZ,EAAM/C,KACZV,MAAO,CAAEmE,YAAaV,EAAM7C,aAC5Be,SAAUoC,EACVK,OAAQF,EACR5G,MAAOsG,EAAWtG,QAiB1B,OAdIwG,EADe,aAAfL,EAAMjD,MAAsC,UAAfiD,EAAMjD,KAC5B,yBAAKN,UAAS,iCAA4B0D,EAAWrG,SAAWqG,EAAWL,WAAa,yBAC3FvD,MAAOyD,EAAMzD,OACZO,EACD,+BAASkD,EAAMhD,QAGZ,yBAAKP,UAAS,mCAA8B0D,EAAWrG,SAAWqG,EAAWL,WAAa,yBAA2BvD,MAAO,CAAEoB,OAAQ,SACzI,2BAAOpB,MAAO,CAAEW,MAAO8C,EAAM9C,QAA7B,IACI8C,EAAMhD,OACTF,GACCqD,EAAWrG,SAAWqG,EAAWL,WAAa,2BAAIE,EAAMzC,YAKlE,6BACS8C,K","file":"static/js/7.1a638f20.chunk.js","sourcesContent":["import React, { useContext, useState } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport MainHeader from '../../shared/Components/MainHeader';\r\nimport FormInput from '../../shared/UIElements/FormInput';\r\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport { useForm } from '../hooks/form-hook';\r\nimport { useHttpClient } from '../hooks/http-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport ImageUpload from '../../shared/UIElements/ImageUpload';\r\nimport ErrorModal from '../../shared/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/UIElements/LoadingSpinner';\r\nimport { Dropdown } from 'semantic-ui-react';\r\n\r\nimport './JobForm.css';\r\n\r\nconst JobForm = () => {\r\n    const auth = useContext(AuthContext);\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    const [checked, setChecked] = useState(false);\r\n    const [checked1, setChecked1] = useState(false);\r\n    const [checked2, setChecked2] = useState(false);\r\n    const [checked3, setChecked3] = useState(false);\r\n    const [checked4, setChecked4] = useState(false);\r\n    const [employment, setEmployment] = useState('-');\r\n\r\n    const employmentType = [\r\n        {\r\n            key: '-',\r\n            text: '-',\r\n            value: '-'\r\n        },\r\n        {\r\n            key: 'full-time',\r\n            text: 'full-time',\r\n            value: 'full-time'\r\n        },\r\n        {\r\n            key: 'part-time',\r\n            text: 'part-time',\r\n            value: 'part-time',\r\n        },\r\n        {\r\n            key: 'contract',\r\n            text: 'contract',\r\n            value: 'contract'\r\n        },\r\n        {\r\n            key: 'ec',\r\n            text: 'employee\\'s choice',\r\n            value: 'ec'\r\n        }\r\n    ]\r\n\r\n    const [formState, inputHandler] = useForm(\r\n        {\r\n            title: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            city: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            pincode: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            description: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            compensation: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            formemail: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            phone: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            contactname: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            extension: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            street: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            crossstreet: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            cityy: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            address: {\r\n                value: '',\r\n                isValid: true\r\n            }\r\n        }, false);\r\n\r\n    let history = useHistory();\r\n    const { location, categoryType, form } = useParams();\r\n\r\n    const postSubmitHandler = async event => {\r\n        event.preventDefault();\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append('title', formState.inputs.title.value);\r\n            formData.append('city', formState.inputs.city.value);\r\n            formData.append('pincode', formState.inputs.pincode.value);\r\n            formData.append('description', formState.inputs.description.value);\r\n            formData.append('compensation', formState.inputs.compensation.value);\r\n            formData.append('formemail', formState.inputs.formemail.value);\r\n            formData.append('phone', formState.inputs.phone.value);\r\n            formData.append('extension', formState.inputs.extension.value);\r\n            formData.append('contactname', formState.inputs.contactname.value);\r\n            formData.append('street', formState.inputs.street.value);\r\n            formData.append('crossstreet', formState.inputs.crossstreet.value);\r\n            formData.append('cityy', formState.inputs.cityy.value);\r\n            formData.append('address', `${formState.inputs.street.value}${formState.inputs.city.value}${formState.inputs.pincode.value}`);\r\n            formData.append('directcontact', checked.directcontact);\r\n            formData.append('internship', checked1.internship);\r\n            formData.append('nonprofit', checked2.nonprofit);\r\n            formData.append('relocation', checked3.relocation);\r\n            formData.append('telecommuting', checked4.telecommuting);\r\n            formData.append('employment', employment);\r\n            formData.append('creator', auth.userId);\r\n            formData.append('postcity', `${location}`);\r\n            formData.append('posttype', `${categoryType}`);\r\n            formData.append('postform', `${form}`);\r\n            await sendRequest(process.env.REACT_APP_BACKEND_URL + '/posts',\r\n                'POST',\r\n                formData,\r\n                {Authorization: 'Bearer ' + auth.token}\r\n            );\r\n            history.push(`/${location}/${categoryType}/${form}/editimage`);\r\n        } catch (err) {\r\n        }\r\n    };   \r\n\r\n    const checkedHandler = (event) => {\r\n            setChecked({ [event.target.id]: event.target.checked });\r\n    }\r\n\r\n    const checkedHandler1 = (event) => {\r\n        setChecked1({ [event.target.id]: event.target.checked });\r\n    }\r\n\r\n    const checkedHandler2 = (event) => {\r\n        setChecked2({ [event.target.id]: event.target.checked });\r\n    }\r\n\r\n    const checkedHandler3 = (event) => {\r\n        setChecked3({ [event.target.id]: event.target.checked });\r\n    }\r\n\r\n    const checkedHandler4 = (event) => {\r\n        setChecked4({ [event.target.id]: event.target.checked });\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ErrorModal error={error} onClear={clearError} />\r\n            <MainHeader style={{textAlign: 'left'}}>\r\n                India > {location} > {categoryType} > {form}\r\n            </MainHeader>\r\n            <div className=\"job-form\">\r\n                <main>\r\n                    <form onSubmit={postSubmitHandler} style={{marginRight: '10px'}}>\r\n                        {isLoading && <LoadingSpinner asOverlay />}\r\n                        <div className=\"center first\">\r\n                            <FormInput\r\n                                id=\"title\"\r\n                                element=\"input\"\r\n                                type=\"text\"\r\n                                label=\"posting title\"\r\n                                size=\"40\"\r\n                                color=\"black\"\r\n                                bordercolor=\"black\"\r\n                                validators={[VALIDATOR_REQUIRE()]}\r\n                                onInput={inputHandler}\r\n                                errorText=\"Please enter a valid title\"\r\n                            ></FormInput>\r\n                            <FormInput\r\n                                id=\"city\"\r\n                                element=\"input\"\r\n                                type=\"text\"\r\n                                label=\"city or neighbourhood\"\r\n                                size=\"40\"\r\n                                validators={[VALIDATOR_REQUIRE()]}\r\n                                onInput={inputHandler}\r\n                                errorText=\"Please enter a valid city or neighbourhood\"\r\n                            ></FormInput>\r\n                            <FormInput\r\n                                id=\"pincode\"\r\n                                element=\"input\"\r\n                                type=\"text\"\r\n                                label=\"pin code\"\r\n                                size=\"20\"\r\n                                color=\"black\"\r\n                                bordercolor=\"black\"\r\n                                validators={[VALIDATOR_REQUIRE()]}\r\n                                onInput={inputHandler}\r\n                                errorText=\"Please enter a valid pincode\"\r\n                            ></FormInput></div>\r\n                        <div style={{marginBottom: '200px'}}>\r\n                            <FormInput\r\n                                id=\"description\"\r\n                                rows=\"10\"\r\n                                type=\"textarea\"\r\n                                label=\"description\"\r\n                                size=\"120\"\r\n                                color=\"green\"\r\n                                bordercolor=\"green\"\r\n                                validators={[VALIDATOR_REQUIRE(), VALIDATOR_MINLENGTH(6)]}\r\n                                onInput={inputHandler}\r\n                                errorText=\"Please enter a valid description\"></FormInput>\r\n                        </div>\r\n                        <div>\r\n                            <fieldset>\r\n                                <legend style={{ textAlign: 'left' }}>posting details</legend>\r\n                                <div className=\"row\">\r\n                                <div className=\"col-md-5\" style={{ margin: '0 0 10px 10px' }}>\r\n                                    <Dropdown\r\n                                        placeholder='-'\r\n                                        fluid\r\n                                        selection\r\n                                        options={employmentType}\r\n                                        onChange={(event, { value }) => {\r\n                                            setEmployment(value);  \r\n                                        }}\r\n\r\n                                    />\r\n                                </div> \r\n                                    <div className=\"col-md-5\" style={{ textAlign: 'left', marginLeft: '10px' }}>\r\n                                    <input type=\"checkbox\"\r\n                                        id=\"directcontact\"\r\n                                        name=\"directcontact\"\r\n                                        onChange={checkedHandler}/>\r\n                                    <label> direct contact by recruiters is ok</label><br />\r\n                                    <input type=\"checkbox\"\r\n                                            id=\"internship\"\r\n                                            name=\"internship\"\r\n                                        onChange={checkedHandler1} />\r\n                                    <label> direct contact by recruiters is ok</label><br />\r\n                                    <input type=\"checkbox\"\r\n                                            id=\"nonprofit\"\r\n                                            name=\"relocation\"\r\n                                        onChange={checkedHandler2} />\r\n                                        <label>non-profit organisation</label><br />\r\n                                    <input type=\"checkbox\"\r\n                                            id=\"relocation\"\r\n                                            name=\"relocation\"\r\n                                        value=\"1\"\r\n                                        onChange={checkedHandler3} />\r\n                                        <label>relocation assisance available</label><br />\r\n                                    <input type=\"checkbox\"\r\n                                            id=\"telecommuting\"\r\n                                            name=\"telecommuting\"\r\n                                        value=\"1\"\r\n                                        onChange={checkedHandler4} />\r\n                                        <label>telecommuting ok</label><br />\r\n                                    </div>\r\n                                </div>\r\n                            </fieldset>\r\n                        </div>\r\n                        <div className=\"center\">\r\n                            <FormInput\r\n                                id=\"compensation\"\r\n                                element=\"input\"\r\n                                type=\"text\"\r\n                                label=\"compensation\"\r\n                                placeholder=\"describe compensation here (please be as detailed as possible)\"\r\n                                size=\"120\"\r\n                                bordercolor=\"green\"\r\n                                validators={[VALIDATOR_REQUIRE()]}\r\n                                onInput={inputHandler}\r\n                                errorText=\"Please enter a valid compensation\"></FormInput>\r\n                        </div>\r\n                        <div className=\"row\" style={{ margin: '0px 10px' }}>\r\n                            <fieldset >\r\n                                <legend style={{ textAlign: 'left' }}>contact info</legend>\r\n                                <div className=\"row\" style={{marginRight: '10px'}}>\r\n                                    <div className=\"col-md-5\" >\r\n                                    <FormInput\r\n                                        id=\"formemail\"\r\n                                        element=\"input\"\r\n                                        type=\"text\"\r\n                                        label=\"email\"\r\n                                        placeholder=\"Your email address\"\r\n                                        size=\"70\"\r\n                                        validators={[VALIDATOR_REQUIRE()]}\r\n                                        onInput={inputHandler}\r\n                                            errorText=\"Please enter a valid email address\"/>\r\n                                </div>\r\n                                <div className=\"col-md-5\">\r\n                                    <fieldset>\r\n                                        <legend style={{ textAlign: 'left' }}>phone/ text</legend>\r\n                                        3\r\n                                            <div className=\"row\">\r\n                                        <div className=\"col-md-7\">\r\n                                            <FormInput\r\n                                                id=\"phone\"\r\n                                                element=\"input\"\r\n                                                type=\"text\"\r\n                                                label=\"phone number\"\r\n                                                size=\"50\"\r\n                                                validators={[VALIDATOR_REQUIRE()]}\r\n                                                onInput={inputHandler}\r\n                                                errorText=\"Please enter a valid phone number\" />\r\n                                            <FormInput\r\n                                                id=\"contactname\"\r\n                                                element=\"input\"\r\n                                                type=\"text\"\r\n                                                label=\"contact name\"\r\n                                                size=\"50\"\r\n                                                validators={[VALIDATOR_REQUIRE()]}\r\n                                                onInput={inputHandler}\r\n                                                errorText=\"Please enter a valid contact name\"></FormInput>\r\n                                        </div>\r\n                                        <div className=\"col-md-5 col-sm-3 col-xs-3\">\r\n                                            <FormInput\r\n                                                id=\"extension\"\r\n                                                element=\"input\"\r\n                                                type=\"text\"\r\n                                                label=\"extension\"\r\n                                                size=\"50\"\r\n                                                validators={[VALIDATOR_REQUIRE()]}\r\n                                                onInput={inputHandler}\r\n                                                errorText=\"Please enter a valid extension\"></FormInput>\r\n                                                </div>\r\n                                        </div>\r\n                                    </fieldset>\r\n                                    </div>\r\n                                </div>\r\n                            </fieldset>\r\n                        </div>\r\n                        <fieldset style={{ marginTop: '10px' }}>\r\n                            <legend style={{ textAlign: 'left' }}>location info</legend>\r\n                            <div className=\"row\">\r\n                            <div className=\"col-md-4\">\r\n                                <FormInput\r\n                                    id=\"street\"\r\n                                    element=\"input\"\r\n                                    type=\"text\"\r\n                                    label=\"street\"\r\n                                    size=\"50\"\r\n                                    validators={[VALIDATOR_REQUIRE()]}\r\n                                    onInput={inputHandler}\r\n                                    errorText=\"Please enter a valid street\"></FormInput>\r\n                            </div>\r\n                                <div className=\"col-md-4\">\r\n                                <FormInput\r\n                                    id=\"crossstreet\"\r\n                                    element=\"input\"\r\n                                    type=\"text\"\r\n                                    label=\"cross street\"\r\n                                    size=\"50\"\r\n                                    validators={[VALIDATOR_REQUIRE()]}\r\n                                    onInput={inputHandler}\r\n                                    errorText=\"Please enter a valid cross street\"></FormInput>\r\n                            </div>\r\n                                <div className=\"col-md-3\">\r\n                                <FormInput\r\n                                    id=\"cityy\"\r\n                                    element=\"input\"\r\n                                    type=\"text\"\r\n                                    label=\"city\"\r\n                                    size=\"50\"\r\n                                    validators={[VALIDATOR_REQUIRE()]}\r\n                                    onInput={inputHandler}\r\n                                    errorText=\"Please enter a valid city\"></FormInput>\r\n                                </div>\r\n                            </div>\r\n                        </fieldset>\r\n                        <div className=\"center\">\r\n                            <button\r\n                                type=\"submit\"\r\n                                onClick={postSubmitHandler}\r\n                                disabled={!formState.isValid}\r\n                            >continue</button>\r\n                        </div>\r\n                    </form>\r\n                </main>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default JobForm;\r\n","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n    let isValid = true;\n    if (validators === null || validators === undefined || validators.length === 0) {\n        return true;\r\n    }\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import { useCallback, useReducer } from 'react';\r\n\r\nconst formReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'INPUT_CHANGE':\r\n            let formIsValid = true;\r\n            for (const inputId in state.inputs) {\r\n                if (inputId === action.inputId) {\r\n                    formIsValid = formIsValid && action.isValid;\r\n                } else {\r\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                inputs: {\r\n                    ...state.inputs,\r\n                    [action.inputId]: { value: action.value, isValid: action.isValid }\r\n                },\r\n                isValid: formIsValid\r\n            };\r\n        case 'SET_DATA':\r\n            return {\r\n                inputs: action.inputs,\r\n                isValid: action.formIsValid\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const useForm = (initialInputs, initialFormValidity) => {\r\n    const [formState, dispatch] = useReducer(formReducer, {\r\n        inputs: initialInputs,\r\n        isValid: initialFormValidity\r\n    });\r\n\r\n    const inputHandler = useCallback((id, value, isValid) => {\r\n        dispatch({\r\n            type: 'INPUT_CHANGE',\r\n            value: value,\r\n            isValid: isValid,\r\n            inputId: id\r\n        });\r\n    }, []);\r\n\r\n    const setFormData = useCallback((inputData, formValidity) => {\r\n        dispatch({\r\n            type: 'SET_DATA',\r\n            inputs: inputData,\r\n            formIsValid: formValidity\r\n        })\r\n    }, []);\r\n\r\n    return [formState, inputHandler, setFormData];\r\n};\r\n\r\n","import React, { useReducer, useEffect } from 'react';\r\n\r\nimport { validate } from '../util/validators';\r\nimport './FormInput.css';\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'CHANGE':\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: validate(action.val, action.validators)\r\n            };\r\n        case 'CHANGED':\r\n            return {\r\n                ...state,\r\n                value: action.val\r\n            };\r\n        case 'TOUCH':\r\n            return {\r\n                ...state,\r\n                isTouched: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst FormInput = props => {\r\n    const [inputState, dispatch] = useReducer(inputReducer,\r\n        {\r\n            value: props.initialValue || '',\r\n            isValid: props.initialValid || false,\r\n            isTouched: false\r\n        });\r\n\r\n    const { id, onInput } = props;\r\n    const { value, isValid } = inputState;\r\n\r\n    useEffect(() => {\r\n        onInput(id, value, isValid)\r\n    }, [id, value, isValid, onInput]);\r\n\r\n    const changeHandler = event => {\r\n        if (props.type === \"checkbox\") {\r\n            if (event.target.checked === true) {\r\n                console.log({ [event.target.id]: event.target.checked });\r\n            }\r\n            else {\r\n                console.log({ [event.target.id]: event.target.value });\r\n            }\r\n            dispatch({ type: 'CHANGED', val: event.target.checked });\r\n        }\r\n        dispatch({ type: 'CHANGE', val: event.target.value, validators: props.validators });\r\n    };\r\n\r\n    const touchHandler = () => {\r\n        dispatch({\r\n            type: 'TOUCH'\r\n        })\r\n    };\r\n\r\n    const element = props.element === \"input\" ?\r\n        <input\r\n            id={props.id}\r\n            type={props.type}\r\n            placeholder={props.placeholder}\r\n            size={props.size}\r\n            style={{ borderColor: props.bordercolor}}\r\n            onChange={changeHandler}\r\n            onBlur={touchHandler}\r\n            value={inputState.value} /> :\r\n        <textarea\r\n            id={props.id}\r\n            rows={props.rows || 3}\r\n            cols={props.size}\r\n            style={{ borderColor: props.bordercolor }}\r\n            onChange={changeHandler}\r\n            onBlur={touchHandler}\r\n            value={inputState.value} />\r\n    let res;\r\n    if (props.type === \"checkbox\" || props.type === \"radio\") {\r\n        res = (<div className={`form-control checkbox ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`}\r\n            style={props.style} >\r\n            {element}\r\n            <label >{props.label}</label>\r\n        </div>)\r\n    } else {\r\n        res = (<div className={`form-control form-group ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`} style={{ margin: '10px' }} >\r\n            <label style={{ color: props.color}\r\n            }> {props.label}</label >\r\n            {element}\r\n            {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n        </div>)\r\n    }\r\n\r\n    return (\r\n    <div>\r\n            {res}\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default FormInput;\r\n"],"sourceRoot":""}