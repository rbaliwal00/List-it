{"version":3,"sources":["postings/pages/UpdatePost.js","shared/UIElements/InputList.js","shared/util/validators.js","postings/hooks/form-hook.js","shared/UIElements/FormInput.js"],"names":["UpdatePost","useState","loadedPost","setLoadedPost","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","postId","useParams","history","useHistory","useForm","title","value","isValid","city","pincode","description","compensation","isvalid","formemail","phone","contactname","extension","street","crossstreet","cityy","formState","inputHandler","setFormData","useEffect","a","process","responseData","post","fetchPost","postUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","Authorization","token","push","userId","className","console","log","Fragment","onClear","onSubmit","id","element","type","label","size","color","bordercolor","validators","VALIDATOR_REQUIRE","onInput","errorText","initialValue","initialValid","style","marginBottom","rows","VALIDATOR_MINLENGTH","placeholder","disabled","InputList","props","htmlFor","children","val","VALIDATOR_EMAIL","validate","undefined","length","validator","trim","test","formReducer","state","action","formIsValid","inputId","initialInputs","initialFormValidity","useReducer","dispatch","useCallback","inputData","formValidity","inputReducer","isTouched","FormInput","inputState","res","changeHandler","target","checked","touchHandler","borderColor","onChange","onBlur","cols","margin"],"mappings":"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","file":"static/js/12.cabd3f53.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nimport FormInput from '../../shared/UIElements/FormInput';\r\nimport MainHeader from '../../shared/Components/MainHeader';\r\nimport InputList from '../../shared/UIElements/InputList';\r\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport { useForm } from '../hooks/form-hook';\r\nimport { useHttpClient } from '../hooks/http-hook';\r\nimport LoadingSpinner from '../../shared/UIElements/LoadingSpinner';\r\nimport ErrorModal from '../../shared/UIElements/ErrorModal';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\n\r\nconst UpdatePost = () => {\r\n    const [loadedPost, setLoadedPost] = useState();\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    const auth = useContext(AuthContext);\r\n    const postId = useParams().postId;\r\n    const history = useHistory();\r\n    const [formState, inputHandler, setFormData] = useForm({\r\n        title: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        city: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        pincode: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        description: {\r\n            value: '',\r\n            isValid: false\r\n        },\r\n        compensation: {\r\n            value: '',\r\n            isvalid: false\r\n        },\r\n        formemail: {\r\n            value: '',\r\n            isvalid: false\r\n        },\r\n        phone: {\r\n            value: '',\r\n            isvalid: false\r\n        },\r\n        contactname: {\r\n            value: '',\r\n            isvalid: false\r\n        },\r\n        extension: {\r\n            value: '',\r\n            isvalid: false\r\n        },\r\n        street: {\r\n            value: '',\r\n            isvalid: false\r\n        },\r\n        crossstreet: {\r\n            value: '',\r\n            isvalid: false\r\n        },\r\n        cityy: {\r\n            value: '',\r\n            isvalid: false\r\n        }\r\n    }, false);\r\n\r\n    useEffect(() => {\r\n        const fetchPost = async () => {\r\n            try {\r\n                const responseData = await sendRequest(process.env.REACT_APP_BACKEND_URL + `/posts/${postId}`);\r\n                setLoadedPost(responseData.post);\r\n                setFormData({\r\n                    title: {\r\n                        value: responseData.post.title,\r\n                        isValid: true\r\n                    },\r\n                    city: {\r\n                        value: responseData.post.city,\r\n                        isValid: true\r\n                    },\r\n                    pincode: {\r\n                        value: responseData.post.pincode,\r\n                        isValid: true\r\n                    },\r\n                    description: {\r\n                        value: responseData.post.description,\r\n                        isValid: true\r\n                    },\r\n                    compensation: {\r\n                        value: responseData.post.compensation,\r\n                        isValid: true\r\n                    },\r\n                    formemail: {\r\n                        value: responseData.post.formemail,\r\n                        isValid: true\r\n                    },\r\n                    phone: {\r\n                        value: responseData.post.phone,\r\n                        isValid: true\r\n                    },\r\n                    contactname: {\r\n                        value: responseData.post.contactname,\r\n                        isValid: true\r\n                    },\r\n                    extension: {\r\n                        value: responseData.post.extension,\r\n                        isValid: true\r\n                    },\r\n                    street: {\r\n                        value: responseData.post.street,\r\n                        isValid: true\r\n                    },\r\n                    crossstreet: {\r\n                        value: responseData.post.crossstreet,\r\n                        isValid: true\r\n                    },\r\n                    cityy: {\r\n                        value: responseData.post.cityy,\r\n                        isValid: true\r\n                    }\r\n                }, true);\r\n            } catch (err) { }\r\n        };\r\n        fetchPost();\r\n    }, [sendRequest, postId,setFormData]);\r\n\r\n    const postUpdateSubmitHandler = async event => {\r\n        event.preventDefault();\r\n        try {\r\n            await sendRequest(`http://localhost:5000/api/posts/${postId}`,\r\n                'PATCH',\r\n                JSON.stringify({\r\n                    title: formState.inputs.title.value,\r\n                    city: formState.inputs.city.value,\r\n                    pincode: formState.inputs.pincode.value,\r\n                    description: formState.inputs.description.value,\r\n                    compensation: formState.inputs.compensation.value,\r\n                    formemail: formState.inputs.formemail.value,\r\n                    phone: formState.inputs.phone.value,\r\n                    extension: formState.inputs.extension.value,\r\n                    contactname: formState.inputs.contactname.value,\r\n                    street: formState.inputs.street.value,\r\n                    crossstreet: formState.inputs.crossstreet.value,\r\n                    cityy: formState.inputs.cityy.value\r\n                }),\r\n                {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: 'Bearer ' + auth.token\r\n                }\r\n            );\r\n            history.push('/' + auth.userId + '/posts');\r\n        } catch (err) {}  \r\n    }\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div className=\"center\">\r\n                <LoadingSpinner />\r\n            </div>);\r\n    }\r\n    console.log(loadedPost);\r\n    if (!loadedPost && !error) {\r\n        return (\r\n            <div className=\"center\">\r\n                <h2>Could not find post!</h2>\r\n            </div>\r\n        );\r\n    } \r\n\r\n        return (\r\n            <React.Fragment>\r\n                <ErrorModal error={error} onClear={clearError} />\r\n                <MainHeader>\r\n                    <nav className=\"wan\">\r\n                        <p>India > </p>\r\n                    </nav>\r\n                </MainHeader>\r\n                {!isLoading && loadedPost && <div className=\"job-form\">\r\n                    \r\n                    <main>\r\n                        <form onSubmit={postUpdateSubmitHandler}>\r\n                            <div className=\"center first\">\r\n                                <FormInput\r\n                                    id=\"title\"\r\n                                    element=\"input\"\r\n                                    type=\"text\" label=\"posting title\"\r\n                                    size=\"40\"\r\n                                    color=\"black\"\r\n                                    bordercolor=\"black\"\r\n                                    validators={[VALIDATOR_REQUIRE()]}\r\n                                    onInput={inputHandler}\r\n                                    errorText=\"Please enter a valid title\"\r\n                                    initialValue={loadedPost.title}\r\n                                    initialValid={true}\r\n                                ></FormInput>\r\n                                <FormInput\r\n                                    id=\"city\"\r\n                                    element=\"input\"\r\n                                    type=\"text\"\r\n                                    label=\"city or neighbourhood\"\r\n                                    size=\"40\"\r\n                                    validators={[VALIDATOR_REQUIRE()]}\r\n                                    onInput={inputHandler}\r\n                                    errorText=\"Please enter a valid city or neighbourhood\"\r\n                                    initialValue={loadedPost.city}\r\n                                    initialValid={true}\r\n                                ></FormInput>\r\n                                <FormInput\r\n                                    id=\"pincode\"\r\n                                    element=\"input\"\r\n                                    type=\"text\"\r\n                                    label=\"pin code\"\r\n                                    size=\"20\"\r\n                                    color=\"black\"\r\n                                    bordercolor=\"black\"\r\n                                    validators={[VALIDATOR_REQUIRE()]}\r\n                                    onInput={inputHandler}\r\n                                    errorText=\"Please enter a valid pincode\"\r\n                                    initialValue={loadedPost.pincode}\r\n                                    initialValid={true}\r\n                                ></FormInput></div>\r\n                            <div className=\"center\" style={{ marginBottom: '200px' }}>\r\n                                <FormInput\r\n                                    id=\"description\"\r\n                                    rows=\"10\"\r\n                                    type=\"textarea\"\r\n                                    label=\"description\"\r\n                                    size=\"120\"\r\n                                    color=\"green\"\r\n                                    bordercolor=\"green\"\r\n                                    validators={[VALIDATOR_REQUIRE(), VALIDATOR_MINLENGTH(6)]}\r\n                                    onInput={inputHandler}\r\n                                    errorText=\"Please enter a valid description\"\r\n                                    initialValue={loadedPost.description}\r\n                                    initialValid={true}></FormInput>\r\n                            </div>\r\n                            <div>\r\n                                <fieldset >\r\n                                    <legend>posting details</legend>\r\n                                    <div className=\"column50\">\r\n                                        \r\n                                    </div>\r\n                                    <div className=\"column50\">\r\n                                        <InputList\r\n                                            element=\"input\"\r\n                                            value=\"1\"\r\n                                            type=\"checkbox\">direct contact by recruiters is ok</InputList>\r\n                                        <InputList\r\n                                            element=\"input\"\r\n                                            value=\"1\"\r\n                                            type=\"checkbox\">internship</InputList>\r\n                                        <InputList\r\n                                            element=\"input\"\r\n                                            value=\"1\"\r\n                                            type=\"checkbox\">non-profit organisation</InputList>\r\n                                        <InputList\r\n                                            element=\"input\"\r\n                                            value=\"1\"\r\n                                            type=\"checkbox\">relocation assisance available</InputList>\r\n                                        <InputList\r\n                                            element=\"input\"\r\n                                            value=\"1\"\r\n                                            type=\"checkbox\">telecommuting ok</InputList>\r\n                                    </div>\r\n                                </fieldset>\r\n                            </div>\r\n\r\n                            <div className=\"center\">\r\n                                <FormInput\r\n                                    id=\"compensation\"\r\n                                    element=\"input\"\r\n                                    type=\"text\"\r\n                                    label=\"compensation\"\r\n                                    placeholder=\"describe compensation here (please be as detailed as possible)\"\r\n                                    size=\"120\"\r\n                                    bordercolor=\"green\"\r\n                                    validators={[VALIDATOR_REQUIRE()]}\r\n                                    onInput={inputHandler}\r\n                                    errorText=\"Please enter a valid compensation\"\r\n                                    initialValue={loadedPost.compensation}\r\n                                    initialValid={true}></FormInput>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                                <fieldset >\r\n                                    <legend>contact info</legend>\r\n                                    <div className=\"column1\">\r\n                                        <FormInput\r\n                                            id=\"formemail\"\r\n                                            element=\"input\"\r\n                                            type=\"text\"\r\n                                            label=\"email\"\r\n                                            placeholder=\"Your email address\"\r\n                                            size=\"70\"\r\n                                            validators={[VALIDATOR_REQUIRE()]}\r\n                                            onInput={inputHandler}\r\n                                            errorText=\"Please enter a valid compensation\"\r\n                                            initialValue={loadedPost.formemail}\r\n                                            initialValid={true} />\r\n                                        <p>email privacy options ?</p>\r\n                                        <InputList\r\n                                            element=\"input\"\r\n                                            value=\"1\"\r\n                                            type=\"radio\">SALEIT mail relay (recommended)</InputList>\r\n                                        <InputList\r\n                                            element=\"input\"\r\n                                            value=\"1\"\r\n                                            type=\"radio\">show my real email address</InputList>\r\n                                        <InputList\r\n                                            element=\"input\"\r\n                                            value=\"1\"\r\n                                            type=\"radio\"\r\n                                        >no replies to this email</InputList>\r\n                                    </div>\r\n                                    <div className=\"column2\">\r\n                                        <fieldset>\r\n                                            <legend>phone/ text</legend>\r\n                                            <div className=\"column\">\r\n                                                <InputList\r\n                                                    element=\"input\"\r\n                                                    value=\"1\"\r\n                                                    type=\"checkbox\"\r\n                                                >show my phone number</InputList>\r\n                                            </div>\r\n                                            <div className=\"column\">\r\n                                                <InputList\r\n                                                    element=\"input\"\r\n                                                    value=\"1\"\r\n                                                    type=\"checkbox\"\r\n                                                >phone calls OK</InputList>\r\n                                            </div>\r\n                                            <div className=\"column\">\r\n                                                <InputList\r\n                                                    element=\"input\"\r\n                                                    value=\"1\"\r\n                                                    type=\"checkbox\"\r\n                                                >texts/sms OK</InputList>\r\n                                            </div>\r\n                                            <div className=\"column-phone\">\r\n                                                <FormInput\r\n                                                    id=\"phone\"\r\n                                                    element=\"input\"\r\n                                                    type=\"text\"\r\n                                                    label=\"phone number\"\r\n                                                    size=\"50\"\r\n                                                    validators={[VALIDATOR_REQUIRE()]}\r\n                                                    onInput={inputHandler}\r\n                                                    errorText=\"Please enter a valid phone number\"\r\n                                                    initialValue={loadedPost.phone}\r\n                                                    initialValid={true} />\r\n                                                <FormInput\r\n                                                    id=\"contactname\"\r\n                                                    element=\"input\"\r\n                                                    type=\"text\"\r\n                                                    label=\"contact name\"\r\n                                                    size=\"50\"\r\n                                                    validators={[VALIDATOR_REQUIRE()]}\r\n                                                    onInput={inputHandler}\r\n                                                    errorText=\"Please enter a valid contact name\"\r\n                                                    initialValue={loadedPost.contactname}\r\n                                                    initialValid={true}></FormInput>\r\n                                            </div>\r\n                                            <div className=\"column-extension\">\r\n                                                <FormInput\r\n                                                    id=\"extension\"\r\n                                                    element=\"input\"\r\n                                                    type=\"text\"\r\n                                                    label=\"extension\"\r\n                                                    size=\"50\"\r\n                                                    validators={[VALIDATOR_REQUIRE()]}\r\n                                                    onInput={inputHandler}\r\n                                                    errorText=\"Please enter a valid extension\"\r\n                                                    initialValue={loadedPost.extension}\r\n                                                    initialValid={true}></FormInput>\r\n                                            </div>\r\n                                        </fieldset>\r\n                                    </div>\r\n                                </fieldset>\r\n                            </div>\r\n                            <fieldset>\r\n                                <legend>location info</legend>\r\n                                <InputList\r\n                                    element=\"input\"\r\n                                    value=\"1\"\r\n                                    type=\"checkbox\"\r\n                                >show my address</InputList>\r\n                                <div className=\"column\">\r\n                                    <FormInput\r\n                                        id=\"street\"\r\n                                        element=\"input\"\r\n                                        type=\"text\"\r\n                                        label=\"street\"\r\n                                        size=\"50\"\r\n                                        validators={[VALIDATOR_REQUIRE()]}\r\n                                        onInput={inputHandler}\r\n                                        errorText=\"Please enter a valid street\"\r\n                                        initialValue={loadedPost.street}\r\n                                        initialValid={true}></FormInput>\r\n                                </div>\r\n                                <div className=\"column\">\r\n\r\n                                    <FormInput\r\n                                        id=\"crossstreet\"\r\n                                        element=\"input\"\r\n                                        type=\"text\"\r\n                                        label=\"cross street\"\r\n                                        size=\"50\"\r\n                                        validators={[VALIDATOR_REQUIRE()]}\r\n                                        onInput={inputHandler}\r\n                                        errorText=\"Please enter a valid cross street\"\r\n                                        initialValue={loadedPost.crossstreet}\r\n                                        initialValid={true}></FormInput>\r\n\r\n                                </div>\r\n                                <div className=\"column\">\r\n                                    <FormInput\r\n                                        id=\"cityy\"\r\n                                        element=\"input\"\r\n                                        type=\"text\"\r\n                                        label=\"city\"\r\n                                        size=\"50\"\r\n                                        validators={[VALIDATOR_REQUIRE()]}\r\n                                        onInput={inputHandler}\r\n                                        errorText=\"Please enter a valid city\"\r\n                                        initialValue={loadedPost.cityy}\r\n                                        initialValid={true}></FormInput>\r\n                                </div>\r\n                            </fieldset>\r\n                            <div className=\"center\">\r\n                                <button\r\n                                    type=\"submit\"\r\n                                    disabled={!formState.isValid}\r\n                                >continue</button>\r\n                            </div>\r\n                        </form>\r\n                    </main>\r\n                </div>}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\nexport default UpdatePost;","import React from 'react';\n\nimport './InputList.css';\n\n\nconst InputList = props => {\n\n    const element =\n        props.element === 'input' ? (\n            <label htmlFor={props.id}>\n                <input\n                    id={props.id}\n                    type={props.type}\n                    />{props.children}\n            </label>\n        ) : (\n                <textarea\n                    id={props.id}\n                    rows={props.rows || 3}\n                />\n            );\n\n    return (\n        <div className=\"input-list\">\n            <label htmlFor={props.id}>{props.label}</label>\n            {element}\n        </div>\n    );\n};\n\nexport default InputList;\n","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n    let isValid = true;\n    if (validators === null || validators === undefined || validators.length === 0) {\n        return true;\r\n    }\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import { useCallback, useReducer } from 'react';\r\n\r\nconst formReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'INPUT_CHANGE':\r\n            let formIsValid = true;\r\n            for (const inputId in state.inputs) {\r\n                if (inputId === action.inputId) {\r\n                    formIsValid = formIsValid && action.isValid;\r\n                } else {\r\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                inputs: {\r\n                    ...state.inputs,\r\n                    [action.inputId]: { value: action.value, isValid: action.isValid }\r\n                },\r\n                isValid: formIsValid\r\n            };\r\n        case 'SET_DATA':\r\n            return {\r\n                inputs: action.inputs,\r\n                isValid: action.formIsValid\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const useForm = (initialInputs, initialFormValidity) => {\r\n    const [formState, dispatch] = useReducer(formReducer, {\r\n        inputs: initialInputs,\r\n        isValid: initialFormValidity\r\n    });\r\n\r\n    const inputHandler = useCallback((id, value, isValid) => {\r\n        dispatch({\r\n            type: 'INPUT_CHANGE',\r\n            value: value,\r\n            isValid: isValid,\r\n            inputId: id\r\n        });\r\n    }, []);\r\n\r\n    const setFormData = useCallback((inputData, formValidity) => {\r\n        dispatch({\r\n            type: 'SET_DATA',\r\n            inputs: inputData,\r\n            formIsValid: formValidity\r\n        })\r\n    }, []);\r\n\r\n    return [formState, inputHandler, setFormData];\r\n};\r\n\r\n","import React, { useReducer, useEffect } from 'react';\r\n\r\nimport { validate } from '../util/validators';\r\nimport './FormInput.css';\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'CHANGE':\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: validate(action.val, action.validators)\r\n            };\r\n        case 'CHANGED':\r\n            return {\r\n                ...state,\r\n                value: action.val\r\n            };\r\n        case 'TOUCH':\r\n            return {\r\n                ...state,\r\n                isTouched: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst FormInput = props => {\r\n    const [inputState, dispatch] = useReducer(inputReducer,\r\n        {\r\n            value: props.initialValue || '',\r\n            isValid: props.initialValid || false,\r\n            isTouched: false\r\n        });\r\n\r\n    const { id, onInput } = props;\r\n    const { value, isValid } = inputState;\r\n\r\n    useEffect(() => {\r\n        onInput(id, value, isValid)\r\n    }, [id, value, isValid, onInput]);\r\n\r\n    const changeHandler = event => {\r\n        if (props.type === \"checkbox\") {\r\n            if (event.target.checked === true) {\r\n                console.log({ [event.target.id]: event.target.checked });\r\n            }\r\n            else {\r\n                console.log({ [event.target.id]: event.target.value });\r\n            }\r\n            dispatch({ type: 'CHANGED', val: event.target.checked });\r\n        }\r\n        dispatch({ type: 'CHANGE', val: event.target.value, validators: props.validators });\r\n    };\r\n\r\n    const touchHandler = () => {\r\n        dispatch({\r\n            type: 'TOUCH'\r\n        })\r\n    };\r\n\r\n    const element = props.element === \"input\" ?\r\n        <input\r\n            id={props.id}\r\n            type={props.type}\r\n            placeholder={props.placeholder}\r\n            size={props.size}\r\n            style={{ borderColor: props.bordercolor}}\r\n            onChange={changeHandler}\r\n            onBlur={touchHandler}\r\n            value={inputState.value} /> :\r\n        <textarea\r\n            id={props.id}\r\n            rows={props.rows || 3}\r\n            cols={props.size}\r\n            style={{ borderColor: props.bordercolor }}\r\n            onChange={changeHandler}\r\n            onBlur={touchHandler}\r\n            value={inputState.value} />\r\n    let res;\r\n    if (props.type === \"checkbox\" || props.type === \"radio\") {\r\n        res = (<div className={`form-control checkbox ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`}\r\n            style={props.style} >\r\n            {element}\r\n            <label >{props.label}</label>\r\n        </div>)\r\n    } else {\r\n        res = (<div className={`form-control form-group ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`} style={{ margin: '10px' }} >\r\n            <label style={{ color: props.color}\r\n            }> {props.label}</label >\r\n            {element}\r\n            {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n        </div>)\r\n    }\r\n\r\n    return (\r\n    <div>\r\n            {res}\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default FormInput;\r\n"],"sourceRoot":""}