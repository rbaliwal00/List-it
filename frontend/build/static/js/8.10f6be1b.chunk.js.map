{"version":3,"sources":["postings/components/GigForm.js","shared/util/validators.js","postings/hooks/form-hook.js","shared/UIElements/FormInput.js"],"names":["GigForm","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useForm","title","value","isValid","city","pincode","description","formemail","phone","contactname","extension","street","crossstreet","cityy","address","formState","inputHandler","history","useHistory","useParams","location","categoryType","form","postSubmitHandler","event","a","preventDefault","formData","FormData","append","inputs","userId","process","Authorization","token","push","Fragment","onClear","style","textAlign","className","onSubmit","marginRight","asOverlay","id","element","type","label","size","color","bordercolor","validators","VALIDATOR_REQUIRE","onInput","errorText","marginBottom","rows","VALIDATOR_MINLENGTH","margin","placeholder","marginTop","onClick","disabled","val","VALIDATOR_EMAIL","validate","undefined","length","validator","trim","test","formReducer","state","action","formIsValid","inputId","initialInputs","initialFormValidity","useReducer","dispatch","useCallback","inputData","formValidity","inputReducer","isTouched","FormInput","props","initialValue","initialValid","inputState","useEffect","res","changeHandler","target","checked","console","log","touchHandler","borderColor","onChange","onBlur","cols"],"mappings":"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","file":"static/js/8.10f6be1b.chunk.js","sourcesContent":["import React, { useContext, useState } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport MainHeader from '../../shared/Components/MainHeader';\r\nimport FormInput from '../../shared/UIElements/FormInput';\r\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport { useForm } from '../hooks/form-hook';\r\nimport { useHttpClient } from '../hooks/http-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport ImageUpload from '../../shared/UIElements/ImageUpload';\r\nimport ErrorModal from '../../shared/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/UIElements/LoadingSpinner';\r\nimport { Dropdown } from 'semantic-ui-react';\r\n\r\nimport './JobForm.css';\r\n\r\nconst GigForm = () => {\r\n    const auth = useContext(AuthContext);\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n    const [formState, inputHandler] = useForm(\r\n        {\r\n            title: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            city: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            pincode: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            description: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            formemail: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            phone: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            contactname: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            extension: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            street: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            crossstreet: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            cityy: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            address: {\r\n                value: '',\r\n                isValid: true\r\n            }\r\n        }, false);\r\n\r\n    let history = useHistory();\r\n    const { location, categoryType, form } = useParams();\r\n\r\n    const postSubmitHandler = async event => {\r\n        event.preventDefault();\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append('title', formState.inputs.title.value);\r\n            formData.append('city', formState.inputs.city.value);\r\n            formData.append('pincode', formState.inputs.pincode.value);\r\n            formData.append('description', formState.inputs.description.value);\r\n            formData.append('formemail', formState.inputs.formemail.value);\r\n            formData.append('phone', formState.inputs.phone.value);\r\n            formData.append('extension', formState.inputs.extension.value);\r\n            formData.append('contactname', formState.inputs.contactname.value);\r\n            formData.append('street', formState.inputs.street.value);\r\n            formData.append('crossstreet', formState.inputs.crossstreet.value);\r\n            formData.append('cityy', formState.inputs.cityy.value);\r\n            formData.append('address', `${formState.inputs.street.value}${formState.inputs.city.value}${formState.inputs.pincode.value}`);\r\n            formData.append('creator', auth.userId);\r\n            formData.append('postcity', `${location}`);\r\n            formData.append('posttype', `${categoryType}`);\r\n            formData.append('postform', `${form}`);\r\n            await sendRequest(process.env.REACT_APP_BACKEND_URL + '/posts',\r\n                'POST',\r\n                formData,\r\n                { Authorization: 'Bearer ' + auth.token }\r\n            );\r\n            history.push(`/${location}/${categoryType}/${form}/editimage`);\r\n        } catch (err) {\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ErrorModal error={error} onClear={clearError} />\r\n            <MainHeader style={{ textAlign: 'left' }}>\r\n                India > {location} > {categoryType} > {form}\r\n            </MainHeader>\r\n            <div className=\"job-form\">\r\n                <main>\r\n                    <form onSubmit={postSubmitHandler} style={{ marginRight: '10px' }}>\r\n                        {isLoading && <LoadingSpinner asOverlay />}\r\n                        <div className=\"center first\">\r\n                            <FormInput\r\n                                id=\"title\"\r\n                                element=\"input\"\r\n                                type=\"text\"\r\n                                label=\"posting title\"\r\n                                size=\"40\"\r\n                                color=\"black\"\r\n                                bordercolor=\"black\"\r\n                                validators={[VALIDATOR_REQUIRE()]}\r\n                                onInput={inputHandler}\r\n                                errorText=\"Please enter a valid title\"\r\n                            ></FormInput>\r\n                            <FormInput\r\n                                id=\"city\"\r\n                                element=\"input\"\r\n                                type=\"text\"\r\n                                label=\"city or neighbourhood\"\r\n                                size=\"40\"\r\n                                validators={[VALIDATOR_REQUIRE()]}\r\n                                onInput={inputHandler}\r\n                                errorText=\"Please enter a valid city or neighbourhood\"\r\n                            ></FormInput>\r\n                            <FormInput\r\n                                id=\"pincode\"\r\n                                element=\"input\"\r\n                                type=\"text\"\r\n                                label=\"pin code\"\r\n                                size=\"20\"\r\n                                color=\"black\"\r\n                                bordercolor=\"black\"\r\n                                validators={[VALIDATOR_REQUIRE()]}\r\n                                onInput={inputHandler}\r\n                                errorText=\"Please enter a valid pincode\"\r\n                            ></FormInput></div>\r\n                        <div style={{ marginBottom: '200px' }}>\r\n                            <FormInput\r\n                                id=\"description\"\r\n                                rows=\"10\"\r\n                                type=\"textarea\"\r\n                                label=\"description\"\r\n                                size=\"120\"\r\n                                color=\"green\"\r\n                                bordercolor=\"green\"\r\n                                validators={[VALIDATOR_REQUIRE(), VALIDATOR_MINLENGTH(6)]}\r\n                                onInput={inputHandler}\r\n                                errorText=\"Please enter a valid description\"></FormInput>\r\n                        </div>\r\n                        <div className=\"row\" style={{ margin: '0px 10px' }}>\r\n                            <fieldset >\r\n                                <legend style={{ textAlign: 'left' }}>contact info</legend>\r\n                                <div className=\"row\" style={{ marginRight: '10px' }}>\r\n                                    <div className=\"col-md-5\" >\r\n                                        <FormInput\r\n                                            id=\"formemail\"\r\n                                            element=\"input\"\r\n                                            type=\"text\"\r\n                                            label=\"email\"\r\n                                            placeholder=\"Your email address\"\r\n                                            size=\"70\"\r\n                                            validators={[VALIDATOR_REQUIRE()]}\r\n                                            onInput={inputHandler}\r\n                                            errorText=\"Please enter a valid compensation\" />\r\n                                    </div>\r\n                                    <div className=\"col-md-5\">\r\n                                        <fieldset>\r\n                                            <legend style={{ textAlign: 'left' }}>phone/ text</legend>\r\n                                            <div className=\"row\">\r\n                                                <div className=\"col-md-7\">\r\n                                                    <FormInput\r\n                                                        id=\"phone\"\r\n                                                        element=\"input\"\r\n                                                        type=\"text\"\r\n                                                        label=\"phone number\"\r\n                                                        size=\"50\"\r\n                                                        validators={[VALIDATOR_REQUIRE()]}\r\n                                                        onInput={inputHandler}\r\n                                                        errorText=\"Please enter a valid phone number\" />\r\n                                                    <FormInput\r\n                                                        id=\"contactname\"\r\n                                                        element=\"input\"\r\n                                                        type=\"text\"\r\n                                                        label=\"contact name\"\r\n                                                        size=\"50\"\r\n                                                        validators={[VALIDATOR_REQUIRE()]}\r\n                                                        onInput={inputHandler}\r\n                                                        errorText=\"Please enter a valid contact name\"></FormInput>\r\n                                                </div>\r\n                                                <div className=\"col-md-5 col-sm-3 col-xs-3\">\r\n                                                    <FormInput\r\n                                                        id=\"extension\"\r\n                                                        element=\"input\"\r\n                                                        type=\"text\"\r\n                                                        label=\"extension\"\r\n                                                        size=\"50\"\r\n                                                        validators={[VALIDATOR_REQUIRE()]}\r\n                                                        onInput={inputHandler}\r\n                                                        errorText=\"Please enter a valid extension\"></FormInput>\r\n                                                </div>\r\n                                            </div>\r\n                                        </fieldset>\r\n                                    </div>\r\n                                </div>\r\n                            </fieldset>\r\n                        </div>\r\n                        <fieldset style={{ marginTop: '10px' }}>\r\n                            <legend style={{ textAlign: 'left' }}>location info</legend>\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-4\">\r\n                                    <FormInput\r\n                                        id=\"street\"\r\n                                        element=\"input\"\r\n                                        type=\"text\"\r\n                                        label=\"street\"\r\n                                        size=\"50\"\r\n                                        validators={[VALIDATOR_REQUIRE()]}\r\n                                        onInput={inputHandler}\r\n                                        errorText=\"Please enter a valid street\"></FormInput>\r\n                                </div>\r\n                                <div className=\"col-md-4\">\r\n                                    <FormInput\r\n                                        id=\"crossstreet\"\r\n                                        element=\"input\"\r\n                                        type=\"text\"\r\n                                        label=\"cross street\"\r\n                                        size=\"50\"\r\n                                        validators={[VALIDATOR_REQUIRE()]}\r\n                                        onInput={inputHandler}\r\n                                        errorText=\"Please enter a valid cross street\"></FormInput>\r\n                                </div>\r\n                                <div className=\"col-md-3\">\r\n                                    <FormInput\r\n                                        id=\"cityy\"\r\n                                        element=\"input\"\r\n                                        type=\"text\"\r\n                                        label=\"city\"\r\n                                        size=\"50\"\r\n                                        validators={[VALIDATOR_REQUIRE()]}\r\n                                        onInput={inputHandler}\r\n                                        errorText=\"Please enter a valid city\"></FormInput>\r\n                                </div>\r\n                            </div>\r\n                        </fieldset>\r\n                        <div className=\"center\">\r\n                            <button\r\n                                type=\"submit\"\r\n                                onClick={postSubmitHandler}\r\n                                disabled={!formState.isValid}\r\n                            >continue</button>\r\n                        </div>\r\n                    </form>\r\n                </main>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default GigForm;","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n    let isValid = true;\n    if (validators === null || validators === undefined || validators.length === 0) {\n        return true;\r\n    }\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import { useCallback, useReducer } from 'react';\r\n\r\nconst formReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'INPUT_CHANGE':\r\n            let formIsValid = true;\r\n            for (const inputId in state.inputs) {\r\n                if (inputId === action.inputId) {\r\n                    formIsValid = formIsValid && action.isValid;\r\n                } else {\r\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                inputs: {\r\n                    ...state.inputs,\r\n                    [action.inputId]: { value: action.value, isValid: action.isValid }\r\n                },\r\n                isValid: formIsValid\r\n            };\r\n        case 'SET_DATA':\r\n            return {\r\n                inputs: action.inputs,\r\n                isValid: action.formIsValid\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const useForm = (initialInputs, initialFormValidity) => {\r\n    const [formState, dispatch] = useReducer(formReducer, {\r\n        inputs: initialInputs,\r\n        isValid: initialFormValidity\r\n    });\r\n\r\n    const inputHandler = useCallback((id, value, isValid) => {\r\n        dispatch({\r\n            type: 'INPUT_CHANGE',\r\n            value: value,\r\n            isValid: isValid,\r\n            inputId: id\r\n        });\r\n    }, []);\r\n\r\n    const setFormData = useCallback((inputData, formValidity) => {\r\n        dispatch({\r\n            type: 'SET_DATA',\r\n            inputs: inputData,\r\n            formIsValid: formValidity\r\n        })\r\n    }, []);\r\n\r\n    return [formState, inputHandler, setFormData];\r\n};\r\n\r\n","import React, { useReducer, useEffect } from 'react';\r\n\r\nimport { validate } from '../util/validators';\r\nimport './FormInput.css';\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'CHANGE':\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: validate(action.val, action.validators)\r\n            };\r\n        case 'CHANGED':\r\n            return {\r\n                ...state,\r\n                value: action.val\r\n            };\r\n        case 'TOUCH':\r\n            return {\r\n                ...state,\r\n                isTouched: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst FormInput = props => {\r\n    const [inputState, dispatch] = useReducer(inputReducer,\r\n        {\r\n            value: props.initialValue || '',\r\n            isValid: props.initialValid || false,\r\n            isTouched: false\r\n        });\r\n\r\n    const { id, onInput } = props;\r\n    const { value, isValid } = inputState;\r\n\r\n    useEffect(() => {\r\n        onInput(id, value, isValid)\r\n    }, [id, value, isValid, onInput]);\r\n\r\n    const changeHandler = event => {\r\n        if (props.type === \"checkbox\") {\r\n            if (event.target.checked === true) {\r\n                console.log({ [event.target.id]: event.target.checked });\r\n            }\r\n            else {\r\n                console.log({ [event.target.id]: event.target.value });\r\n            }\r\n            dispatch({ type: 'CHANGED', val: event.target.checked });\r\n        }\r\n        dispatch({ type: 'CHANGE', val: event.target.value, validators: props.validators });\r\n    };\r\n\r\n    const touchHandler = () => {\r\n        dispatch({\r\n            type: 'TOUCH'\r\n        })\r\n    };\r\n\r\n    const element = props.element === \"input\" ?\r\n        <input\r\n            id={props.id}\r\n            type={props.type}\r\n            placeholder={props.placeholder}\r\n            size={props.size}\r\n            style={{ borderColor: props.bordercolor}}\r\n            onChange={changeHandler}\r\n            onBlur={touchHandler}\r\n            value={inputState.value} /> :\r\n        <textarea\r\n            id={props.id}\r\n            rows={props.rows || 3}\r\n            cols={props.size}\r\n            style={{ borderColor: props.bordercolor }}\r\n            onChange={changeHandler}\r\n            onBlur={touchHandler}\r\n            value={inputState.value} />\r\n    let res;\r\n    if (props.type === \"checkbox\" || props.type === \"radio\") {\r\n        res = (<div className={`form-control checkbox ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`}\r\n            style={props.style} >\r\n            {element}\r\n            <label >{props.label}</label>\r\n        </div>)\r\n    } else {\r\n        res = (<div className={`form-control form-group ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`} style={{ margin: '10px' }} >\r\n            <label style={{ color: props.color}\r\n            }> {props.label}</label >\r\n            {element}\r\n            {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n        </div>)\r\n    }\r\n\r\n    return (\r\n    <div>\r\n            {res}\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default FormInput;\r\n"],"sourceRoot":""}